FOR FILE WRITING{
    i assume we are meant to do something like write all the south america countries, north american countries 
    to individual separate files and then when i need to address those countries i just loop through their files
    instead of checking through the og file everytime
}





create countries{
    make an empty array 
    in a loop, update a variable with the next line of data, add that variable to the array
    eventually u have an array full of these countries
}
create covidrecords with countries{
    do same as countries with added pcountry being countryArrayList[i] in your loop

}


for continent selection{
    so theyve picked their continent
    then for either of the first 3 options ("totals"){
        for recordArrayList.length
            if recordArrayList[i].getContinent.equals(user inputted continent)
                totalValueHolder += recordArrayList[i].getTotalofthing

        print totalValueHolder
    

    }
}




switch(pInputString){
            case "All countries":

            break;
            case "Enter a Country":
                notall = true;
            break;
                notall = true;
            default:
                notall = true;
            break;
        }

        switch(pInput){
            case 1:
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        x = pCovidRecordArray[i].getCumulativePositive();
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pCaseInputString)) && !(pCovidRecordArray[i].getCountry().getDate().equals(pCaseInputString))){
                            x = 0;
                        }
                        totalReturnVal += x;
                    }
                }








import packages

public class UserInterface{
    
    

    public main{
        create new scanner sc
        boolean loop = true;
        (while loop is true){

        array of covid records (covidRecordArray) = readFile("csv file name")


        print "Welcome to the JRC COVID-19 Analysis Program. There are a total of 1778 records loaded. Please make a selection from the Menu below to choose which area (or date) to analyse: "
        print "> 1 = All countries"
        print "> 2 = Countries in South America"
        print "> 3 = Countries in North America"
        print "> 4 = Countries in Oceania"
        print "> 5 = Countries in Asia"
        print "> 6 = Countries in Africa"
        print "> 7 = Countries in Europe"
        print "> 8 = Enter a Country"
        print "> 9 = Enter a Date"
        print empty line
        print "Enter selection: "

        int input = next integer input into scanner
        String inputString = ""
        int caseInput
        String caseInputString = ""
        boolean checker = false
        SWITCH (input)
            case 1:
                inputString = "All countries"
            break
            case 2:
                inputString = "SA"
            break
            case 3:
                inputString = "NA"
            break
            case 4:
                inputString = "OC"
            break
            case 5:
                inputString = "AS"
            break
            case 6:
                inputString = "AF"
            break
            case 7:
                inputString = "EU"
            break
            case 8:
            consume end of last line for scanner
            do 
                inputString = next line of user input
                for each element in the covidRecordArray (each valid line in the csv file)
                    if the element is valid
                        if the element's country equals to the line of user input
                            checker = true
        
                if checker equals to false 
                    print "Not a valid Country"
                
            while (checker equals to false)
            break
            case 9:
            consume end of last line for scanner
            do 
                inputString = next line of user input
                for each element in the covidRecordArray (each valid line in the csv file)
                    if the element is valid
                        if the element's date equals to the line of user input
                            checker = true
        
                if checker equals to false 
                    print "Not a valid Date"
                
            while (checker equals to false)
            break
        

        caseInput = secondMenu(sc)
        thirdMenu(caseInput, inputString, covidRecordArray)

    
        close scanner
    

    CovidRecord[] readFile(String pFileName)
        FileInputStream fileStream = null;
        InputStreamReader rdr;
        BufferedReader bufRdr;
        int lineNum = 0;
        String line;
        CovidRecord[] covidRecordArray = new CovidRecord[1];

        try{
            fileStream = new FileInputStream(pFileName);
            rdr = new InputStreamReader(fileStream);
            bufRdr = new BufferedReader(rdr);
            lineNum = 0;
            line = bufRdr.readLine();
            while(line != null){
                lineNum++; //for calculating length of CSV file used (number of lines)
                line = bufRdr.readLine();
            }
            fileStream.close();

            covidRecordArray = new CovidRecord[lineNum];

            fileStream = new FileInputStream(pFileName); //all this is renewed again to start fresh to cycle through file from the top
            rdr = new InputStreamReader(fileStream);
            bufRdr = new BufferedReader(rdr);
            line = bufRdr.readLine();
            for(int i=0; i < (lineNum); i++){  //keep within length that was found just prior
                line = bufRdr.readLine();
                if(line != null){

                String [] stringArray = processLine(line);

                for(int j = 0; j<stringArray.length; j++){
                    if(stringArray[j].isEmpty()){
                        stringArray[j] = "0"; //dealing with empty cells. if any of the cells in a line were empty, they would just be assigned the value zero
                    }
                }

                Country country = new Country(stringArray[1], stringArray[2], stringArray[3], stringArray[12], Double.parseDouble(stringArray[4]), Double.parseDouble(stringArray[5])); //create a new country object based on the important values parsed from the current line in the CSV file
                CovidRecord covidRecord = new CovidRecord(stringArray[0], Integer.parseInt(stringArray[6]), Integer.parseInt(stringArray[7]), Integer.parseInt(stringArray[8]), Integer.parseInt(stringArray[9]), Integer.parseInt(stringArray[10]), Integer.parseInt(stringArray[11]), country); //create a new CovidRecord object based on current CSV line

                covidRecordArray[i] = covidRecord; //assign the newly created covidRecord object to the current element of the array

            }

            }
            fileStream.close();
        } catch(IOException errorDetails){
            if(fileStream != null){
                try{
                    fileStream.close();
                }catch(IOException ex2){

                }
            }
            System.out.println("An error! " + errorDetails.getMessage());
        }
        
        return covidRecordArray;
    }
    

    public static String[] processLine(String csvRow){  //reading one row of a csv file at a time, separated by string.split method
        String[] splitLine;
        splitLine = csvRow.split(",", -1); //the -1 keeps empty cells in the line rather than remove them. the empty cells are then dealt with in the readFile method, as explained above
        return splitLine;
        }

    public static int secondMenu(Scanner pSc){ //the second menu created into its own function

        System.out.println("> 1 = Total number of cumulatively positive cases");
        System.out.println("> 2 = Total number of cumulatively deceased cases");
        System.out.println("> 3 = Total number of cumulatively recovered cases");
        System.out.println("> 4 = Average daily number of currently positive cases");
        System.out.println("> 5 = Number and percentage of cumulatively positive cases recovered");
        System.out.println("> 6 = Number and percentage of cumulatively positive cases deceased");
        System.out.println("> 7 = All of the above statistics");

        int input2 = pSc.nextInt();

        return input2; //return the choice of the user on the second menu
    }

    public static void thirdMenu(int pInput, String pInputString, CovidRecord[] pCovidRecordArray){ //deals with the final output of this series of choices
        int finalCalcVal = 0;
        int[] finalValArr = new int[2];
        int[] otherFinalValArr = new int [3];
        switch(pInput){ //i have two separate switch cases so that in the first, i can address multiple outcomes as a whole. whereas in the second switch case, i then address each individually
            case 1: case 2: case 3: case 4: //if any of the first four options on second menu
                finalCalcVal = firstFourMenuCalcs(pInput, pInputString, pCovidRecordArray);
            break;
            case 5: case 6: 
                finalValArr = nextTwoMenuCalcs(pInput, pInputString, pCovidRecordArray); //the same. run the method first then change the variable being printed if wanting to print an entered country or date
            break;
        }

        switch(pInput){
            case 1:
                System.out.println("Cumulative number of positive cases in " + pInputString + ": " + finalCalcVal); //pInputString here would now be changed if needed to be. e.g. would now be "Brazil" and not "Enter a Country"
                printEnding(); //see below for what this does. essentially helps aesthetic
            break;
            case 2:
                System.out.println("Cumulative number of deceased cases in " + pInputString + ": " + finalCalcVal);
                printEnding();
            break;
            case 3:
                System.out.println("Cumulative number of recovered cases in " + pInputString + ": " + finalCalcVal);
                printEnding();
            break;
            case 4:
                System.out.println("Average daily number of currently positive cases in " + pInputString + ": " + finalCalcVal);
                printEnding();  
            break;
            case 5:
                System.out.println("Number and percentage of cumulatively positive cases recovered in " + pInputString + ": " + finalValArr[0] + " = " + (((double) finalValArr[0] / (double) finalValArr[1]) * 100) + "%"); //I CALCULATE PERCENTAGE HERE SO THAT I CAN HAVE FIRST VALUE AS AN INTEGER FOR FIRST "NUMBER PART OF PRINT" AND THEN CAN CHANGE IT TO A PERCENTAGE (double) AFTERWARDS.
                printEnding();
            break;
            case 6:
                System.out.println("Number and percentage of cumulatively positive cases deceased in " + pInputString + ": " + finalValArr[0] + " = " + (((double) finalValArr[0] / (double) finalValArr[1]) * 100) + "%");
                printEnding();                
            break;
            case 7: //this essentially runs all the other options in one go
                otherFinalValArr = lastMenuCalc(pInputString, pCovidRecordArray);
                System.out.println("Cumulative number of positive cases in " + pInputString + ": " + otherFinalValArr[0]);
                System.out.println("Cumulative number of deceased cases in " + pInputString + ": " + otherFinalValArr[1]);
                System.out.println("Cumulative number of recovered cases in " + pInputString + ": " + otherFinalValArr[2]);
                System.out.println("Average daily number of currently positive cases in " + pInputString + ": " + otherFinalValArr[3]);
                System.out.println("Number and percentage of cumulatively positive cases recovered in " + pInputString + ": " + otherFinalValArr[2] + " = " + (((double) otherFinalValArr[2] / (double) otherFinalValArr[0]) * 100) + "%");
                System.out.println("Number and percentage of cumulatively positive cases deceased in " + pInputString + ": " + otherFinalValArr[1] + " = " + (((double) otherFinalValArr[1] / (double) otherFinalValArr[0]) * 100) + "%");
                printEnding();
            break;



        }
        
    }

    public static void printEnding(){ //creating a method for ending the print statements so that it could be used easily. helps the aesthetic when viewing
        System.out.println();
        System.out.println("===============================");
        System.out.println();
    }       


    public static int firstFourMenuCalcs(int pInput, String pInputString, CovidRecord[] pCovidRecordArray){
        int totalReturnVal = 0;
        int ticker = 0;
        
        boolean notall = false;
        switch(pInputString){ 
            case "All countries":

            break;
            default:
                notall = true; //notall if a boolean checker to check if the user did not input "All countries"
            break;
        }

        switch(pInput){
            case 1:
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCumulativePositive(); //Does it for all possible options
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ //if notall is true(not "All countries" so checking for something specific) and its doesnt match any given country, continent or date then it must not be what we're looking for
                            x = 0; //negate this entry if so
                        }
                        totalReturnVal += x;
                    }
                }
            break;
            case 2:
            for(int i = 0; i < pCovidRecordArray.length; i++){
                if(pCovidRecordArray[i] != null){
                    int x = pCovidRecordArray[i].getCumulativeDeceased();
                    if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){
                        x = 0;
                    }
                    totalReturnVal += x;
                }
            }
            break;
            case 3:
            for(int i = 0; i < pCovidRecordArray.length; i++){
                if(pCovidRecordArray[i] != null){
                    int x = pCovidRecordArray[i].getCumulativeRecovered();
                    if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){
                        x = 0;
                    }
                    totalReturnVal += x;
                }
            }
            break;
            case 4:
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCurrentlyPositive();
                        ticker ++;
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){
                            x = 0;
                            ticker --; //additional negate needed so that the counter only ticks up on valid lines
                        }
                        totalReturnVal += x;
                    }
                }
                totalReturnVal = totalReturnVal / ticker; //to get average
            break;
            default:

            break;
        }
        return totalReturnVal;
    }


    public static int[] nextTwoMenuCalcs(int pInput, String pInputString, CovidRecord[] pCovidRecordArray){ //see explanation in thirdMenu for why i send an array of two integers back
        int[] totalReturnValArr = new int[2]; 
        int totalReturnVal1 = 0;
        int totalReturnVal2 = 0;

        boolean notall = false;
        switch(pInputString){
            case "All countries":

            break;
            default:
                notall = true;
            break;
        }

        switch(pInput){
            case 5:
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCumulativeRecovered();
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ //see explanation above in firstFourMenuCalcs
                            x = 0;
                        }
                        totalReturnVal1 += x;
                    }
                }
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCumulativePositive();
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                            x = 0;
                        }
                        totalReturnVal2 += x;
                    }
                }
            totalReturnValArr[0] = totalReturnVal1;
            totalReturnValArr[1] = totalReturnVal2;
            break;
            case 6:
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCumulativeDeceased();
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                            x = 0;
                        }
                        totalReturnVal1 += x;
                    }
                }
                for(int i = 0; i < pCovidRecordArray.length; i++){
                    if(pCovidRecordArray[i] != null){
                        int x = pCovidRecordArray[i].getCumulativePositive();
                        if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                            x = 0;
                        }
                        totalReturnVal2 += x;
                    }
                }
            totalReturnValArr[0] = totalReturnVal1;
            totalReturnValArr[1] = totalReturnVal2;
            break;
            default:

            break;
        }



        return totalReturnValArr;
    }

    
    public static int[] lastMenuCalc(String pInputString, CovidRecord[] pCovidRecordArray){ //a summary of all other methods put into one succint method
        int[] totalReturnValArr = new int[4];
        int cumPosReturnVal = 0;
        int cumDecReturnVal = 0;
        int cumRecReturnVal = 0;
        int aveCurReturnVal = 0;
        int ticker = 0;

        boolean notall = false;
        switch(pInputString){
            case "All countries":

            break;
            default:
                notall = true;
            break;
        }

        for(int i = 0; i < pCovidRecordArray.length; i++){
            if(pCovidRecordArray[i] != null){
                int x = pCovidRecordArray[i].getCumulativePositive();
                if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                    x = 0;
                }
                cumPosReturnVal += x;
            }
        }
        for(int i = 0; i < pCovidRecordArray.length; i++){
            if(pCovidRecordArray[i] != null){
                int x = pCovidRecordArray[i].getCumulativeDeceased();
                if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                    x = 0;
                }
                cumDecReturnVal += x;
            }
        }
        for(int i = 0; i < pCovidRecordArray.length; i++){
            if(pCovidRecordArray[i] != null){
                int x = pCovidRecordArray[i].getCumulativeRecovered();
                if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                    x = 0;
                }
                cumRecReturnVal += x;
            }
        }
        for(int i = 0; i < pCovidRecordArray.length; i++){
            if(pCovidRecordArray[i] != null){
                int x = pCovidRecordArray[i].getCurrentlyPositive();
                ticker ++;
                if(notall && !(pCovidRecordArray[i].getCountry().getCountryName().equals(pInputString)) && !(pCovidRecordArray[i].getDate().equals(pInputString)) && !(pCovidRecordArray[i].getCountry().getContinent().equals(pInputString))){ 
                    x = 0;
                    ticker --;
                }
                aveCurReturnVal += x;
            }
        }
        aveCurReturnVal = aveCurReturnVal / ticker;
        totalReturnValArr[0] = cumPosReturnVal;
        totalReturnValArr[1] = cumDecReturnVal;
        totalReturnValArr[2] = cumRecReturnVal;
        totalReturnValArr[3] = aveCurReturnVal;





        return totalReturnValArr;


    }




}



