
//make a comment in actual code about how you do line = readline twice to skip first line (in readFile)

import packages

public class UserInterface{
    
    

    main{
        create new scanner sc
        boolean loop EQUALS TO true;
        (while loop is true){

        array of covid records (covidRecordArray) EQUALS TO readFile("csv file name")


        print "Welcome to the JRC COVID-19 Analysis Program. There are a total of 1778 records loaded. Please make a selection from the Menu below to choose which area (or date) to analyse: "
        print "> 1 = All countries"
        print "> 2 = Countries in South America"
        print "> 3 = Countries in North America"
        print "> 4 = Countries in Oceania"
        print "> 5 = Countries in Asia"
        print "> 6 = Countries in Africa"
        print "> 7 = Countries in Europe"
        print "> 8 = Enter a Country"
        print "> 9 = Enter a Date"
        print empty line
        print "Enter selection: "

        int input EQUALS TO next integer input into scanner
        String inputString EQUALS TO ""
        int caseInput
        String caseInputString EQUALS TO ""
        boolean checker EQUALS TO false
        SWITCH (input)
            case 1:
                inputString EQUALS TO "All countries"
            break
            case 2:
                inputString EQUALS TO "SA"
            break
            case 3:
                inputString EQUALS TO "NA"
            break
            case 4:
                inputString EQUALS TO "OC"
            break
            case 5:
                inputString EQUALS TO "AS"
            break
            case 6:
                inputString EQUALS TO "AF"
            break
            case 7:
                inputString EQUALS TO "EU"
            break
            case 8:
            consume end of last line for scanner
            do 
                inputString EQUALS TO next line of user input
                for each element in the covidRecordArray (each valid line in the csv file)
                    if the element is valid
                        if the element's country equals to the line of user input
                            checker EQUALS TO true
        
                if checker equals to false 
                    print "Not a valid Country"
                
            while (checker equals to false)
            break
            case 9:
            consume end of last line for scanner
            do 
                inputString EQUALS TO next line of user input
                for each element in the covidRecordArray (each valid line in the csv file)
                    if the element is valid
                        if the element's date equals to the line of user input
                            checker EQUALS TO true
        
                if checker equals to false 
                    print "Not a valid Date"
                
            while (checker equals to false)
            break
        

        caseInput EQUALS TO secondMenu(sc)
        thirdMenu(caseInput, inputString, covidRecordArray)

    
        close scanner
    


        function = "secondMenu" , with parameters(Scanner pSc) and returns an integer{

        print "> 1 = Total number of cumulatively positive cases"
        print "> 2 = Total number of cumulatively deceased cases"
        print "> 3 = Total number of cumulatively recovered cases"
        print "> 4 = Average daily number of currently positive cases"
        print "> 5 = Number and percentage of cumulatively positive cases recovered"
        print "> 6 = Number and percentage of cumulatively positive cases deceased"
        print "> 7 = All of the above statistics");

        input2 equals the next integer read by the scanner

        return input2
    }



    function = "readFile" , with parameters (String pFileName) and returns a CovidRecord array{
        create new fileStream
        create new InputStreamReader (rdr)
        create new BufferedReader (bufRdr)
        lineNum EQUALS TO 0
        String line
        create new covidRecordArray

        try{
            fileStream takes pFileName
            rdr reads fileStream
            bufRdr reads rdr
            lineNum EQUALS TO 0
            line equals to bufRdr reading line
            while line does not equal null {
                add +1 to lineNum 
                line equals to bufRdr reading line
            }
            close fileStream

            make covidRecordArray the size of lineNum

            fileStream takes pFileName again to refresh
            rdr reads fileStream
            bufRdr reads rdr
            line equals to bufRdr reading line 
            for i EQUALS zero, i LESS THAN lineNum, i increment by 1{
                line equals to bufRdr reading line
                if line does not equal null {

                new stringArray equals to processLine(line)

                for j EQUALS zero, j LESS THAN stringArray length, j increment by 1{
                    if stringArray[j] is an empty element {
                        stringArray[j] EQUALS "0"
                    }
                }

                Country country EQUALS to a new Country with parameters(stringArray[1], stringArray[2], stringArray[3], stringArray[12], Double.parseDouble(stringArray[4]), Double.parseDouble(stringArray[5]))
                CovidRecord covidRecord EQUALS to a new CovidRecord with parameters(stringArray[0], Integer.parseInt(stringArray[6]), Integer.parseInt(stringArray[7]), Integer.parseInt(stringArray[8]), Integer.parseInt(stringArray[9]), Integer.parseInt(stringArray[10]), Integer.parseInt(stringArray[11]), country)

                covidRecordArray[i] EQUALS covidRecord; //assign the newly created covidRecord object to the current element of the array

            }

            }
            close fileStream
        } catch an IO error{
            if fileStream is not null{
                try{
                    close fileStream
                }catch an IO error{

                }
            }
            print "An error! " + errorDetails.getMessage()
        }
        
        return covidRecordArray
    }


    function = "processLine" , with parameters(String csvRow) and returns a string array{
        create new string array called splitLine
        splitLine EQUALS to csvRow being split by "," , and keeping any empty cells
        return splitLine
        }




    function = "thirdMenu" with parameters(int pInput, String pInputString, CovidRecord[] pCovidRecordArray){
        finalCalcVal EQUALS TO 0
        finalValArr EQUALS TO an integer array of size 2
        otherFinalValArr EQUALS to an integer array of size 4
        switch(pInput){ 
            case 5: case 6: 
                finalValArr[1] EQUALS TO cumPos(pInputString, pCovidRecordArray)
            break
        }

        switch(pInput){
            case 1:
                finalCalcVal EQUALS TO cumPos(pInputString, pCovidRecordArray)
                print "Cumulative number of positive cases in " + pInputString + ": " + finalCalcVal
                printEnding()
            break
            case 2:
                finalCalcVal EQUALS TO cumDec(pInputString, pCovidRecordArray)
                print "Cumulative number of deceased cases in " + pInputString + ": " + finalCalcVal
                printEnding()
            break
            case 3:
                finalCalcVal EQUALS TO cumRec(pInputString, pCovidRecordArray)
                print "Cumulative number of recovered cases in " + pInputString + ": " + finalCalcVal
                printEnding()
            break
            case 4:
                finalCalcVal EQUALS TO currPos(pInputString, pCovidRecordArray)
                print "Average daily number of currently positive cases in " + pInputString + ": " + finalCalcVal
                printEnding()
            break
            case 5:
                finalValArr[0] EQUALS TO cumRec(pInputString, pCovidRecordArray)
                print "Number and percentage of cumulatively positive cases recovered in " + pInputString + ": " + finalValArr[0] + " = " + (((double) finalValArr[0] / (double) finalValArr[1]) * 100) + "%"
                printEnding()
            break
            case 6:
                finalValArr[0] EQUALS TO cumDec(pInputString, pCovidRecordArray)
                print "Number and percentage of cumulatively positive cases deceased in " + pInputString + ": " + finalValArr[0] + " = " + (((double) finalValArr[0] / (double) finalValArr[1]) * 100) + "%"
                printEnding()              
            break
            case 7: 
                otherFinalValArr[0] EQUALS TO finalValArr[1]
                otherFinalValArr[1] EQUALS TO cumDec(pInputString, pCovidRecordArray)
                otherFinalValArr[2] EQUALS TO cumRec(pInputString, pCovidRecordArray)
                otherFinalValArr[3] EQUALS TO currPos(pInputString, pCovidRecordArray)
                print "Cumulative number of positive cases in " + pInputString + ": " + otherFinalValArr[0]
                print "Cumulative number of deceased cases in " + pInputString + ": " + otherFinalValArr[1]
                print "Cumulative number of recovered cases in " + pInputString + ": " + otherFinalValArr[2]
                print "Average daily number of currently positive cases in " + pInputString + ": " + otherFinalValArr[3]
                print "Number and percentage of cumulatively positive cases recovered in " + pInputString + ": " + otherFinalValArr[2] + " = " + (((double) otherFinalValArr[2] / (double) otherFinalValArr[0]) * 100) + "%"
                print "Number and percentage of cumulatively positive cases deceased in " + pInputString + ": " + otherFinalValArr[1] + " = " + (((double) otherFinalValArr[1] / (double) otherFinalValArr[0]) * 100) + "%"
                printEnding()
            break



        }
        
    }

    function = "printEnding"{
        print an empty line
        print "==============================="
        print an empty line
    }       


    public static int cumPos(String pInputString, CovidRecord[] pCovidRecordArray){
        int totalReturnVal EQUALS TO 0
        
        boolean notall EQUALS TO false
        
        if(pInputString DOES NOT EQUAL to "All countries"){
            notall EQUALS TO true;
        }

        for i EQUALS zero, i LESS THAN pCovidRecordArray length, i increments by +1{
            if(pCovidRecordArray[i] DOES NOT EQUAL null){
                x = pCovidRecordArray[i].getCumulativePositive()
                if(notall is TRUE AND (pCovidRecordArray[i]'s country name DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s date DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s continent DOES NOT EQUAL pInputString){
                    x EQUALS zero;
                }
                add x to totalReturnVal
            }
        }
        return totalReturnVal
        
    }

    public static int cumDec(String pInputString, CovidRecord[] pCovidRecordArray){
        int totalReturnVal EQUALS TO 0
        
        boolean notall EQUALS TO false
        
        if(pInputString DOES NOT EQUAL to "All countries"){
            notall EQUALS TO true;
        }

        for i EQUALS zero, i LESS THAN pCovidRecordArray length, i increments by +1{
            if(pCovidRecordArray[i] DOES NOT EQUAL null){
                x = pCovidRecordArray[i].getCumulativeDeceased()
                if(notall is TRUE AND (pCovidRecordArray[i]'s country name DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s date DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s continent DOES NOT EQUAL pInputString){
                    x EQUALS zero;
                }
                add x to totalReturnVal
            }
        }
        return totalReturnVal
        
    }

    public static int cumRec(String pInputString, CovidRecord[] pCovidRecordArray){
        int totalReturnVal EQUALS TO 0
        
        boolean notall EQUALS TO false
        
        if(pInputString DOES NOT EQUAL to "All countries"){
            notall EQUALS TO true;
        }

        for i EQUALS zero, i LESS THAN pCovidRecordArray length, i increments by +1{
            if(pCovidRecordArray[i] DOES NOT EQUAL null){
                x = pCovidRecordArray[i].getCumulativeRecovered()
                if(notall is TRUE AND (pCovidRecordArray[i]'s country name DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s date DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s continent DOES NOT EQUAL pInputString){
                    x EQUALS zero;
                }
                add x to totalReturnVal
            }
        }
        return totalReturnVal
        
    }

    public static int currPos(String pInputString, CovidRecord[] pCovidRecordArray){
        int totalReturnVal EQUALS TO 0
        
        boolean notall EQUALS TO false
        
        if(pInputString DOES NOT EQUAL to "All countries"){
            notall EQUALS TO true;
        }

        for i EQUALS zero, i LESS THAN pCovidRecordArray length, i increments by +1{
            if(pCovidRecordArray[i] DOES NOT EQUAL null){
                x = pCovidRecordArray[i].getCumulativePositive()
                increment ticker by +1
                if(notall is TRUE AND (pCovidRecordArray[i]'s country name DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s date DOES NOT EQUAL pInputString) AND (pCovidRecordArray[i]'s continent DOES NOT EQUAL pInputString){
                    x EQUALS zero;
                    decrement ticker by +1;
                }
                add x to totalReturnVal
            }
        }
        totalReturnVal EQUALS TO totalReturnVal divided by ticker

        return totalReturnVal
        
    }



Country CLASS

import packages


public class Country {
    String iso3
    String continent
    String countryName
    String nuts
    double lat
    double lon

    //Parameters Constructor
    public Country(String piso3, String pcontinent, String pcountryName, String pnuts, double plat, double plon){
        iso3 EQUALS TO piso3
        continent EQUALS TO pcontinent
        countryName EQUALS TO pcountryName
        nuts EQUALS TO pnuts
        lat EQUALS TO plat
        lon EQUALS TO plon
    }

    function "getIso3" {
        return iso3
    }

    function = "getContinent" {
        return continent
    }

    function = "getCountryName" {
        return countryName
    }

    function = "getNuts" {
        return nuts
    }

    function = "getLat" {
        return lat
    }

    function = "getLon" {
        return lon
    }

}



CovidRecord CLASS


import packages

public class CovidRecord{
    String date
    int cumulativePositive
    int cumulativeDeceased
    int cumulativeRecovered 
    int currentlyPositive
    int hospitalized
    int intensiveCare
    Country country


    public CovidRecord(String pDate, int pCumulativePositive, int pCumulativeDeceased, int pCumulativeRecovered, int pCurrentlyPositive, int pHospitalized, int pIntensiveCare, Country pCountry){
        date EQUALS TO pDate
        cumulativePositive EQUALS TO pCumulativePositive
        cumulativeDeceased EQUALS TO pCumulativeDeceased
        cumulativeRecovered EQUALS TO pCumulativeRecovered
        currentlyPositive EQUALS TO pCurrentlyPositive
        hospitalized EQUALS TO pHospitalized
        intensiveCare EQUALS TO pIntensiveCare
        country EQUALS TO pCountry
    }


    

    function = "getDate" {
        return date
    }

    function = "getCumulativePositive" {
        return cumulativePositive
    }

    function = "getCumulativeDeceased" {
        return cumulativeDeceased
    }

    function = "getCumulativeRecovered" {
        return cumulativeRecovered
    }

    function = "getCurrentlyPositive" {
        return currentlyPositive
    }

    function = "getHospitalized" {
        return hospitalized
    }

    function = "getIntensiveCare" {
        return intensiveCare
    }

    function = "getCountry" {
        return country
    }

}